name: Deploy Frontend to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            APP_DIR="${{ secrets.VPS_APP_DIR }}" 

            echo "üìÇ V√†o th∆∞ m·ª•c d·ª± √°n"
            if [ ! -d "$APP_DIR/.git" ]; then
              mkdir -p "$APP_DIR"
              git clone ${{ secrets.REPO_SSH_URL }} "$APP_DIR"
            fi
            cd "$APP_DIR"

            echo "üîÑ ƒê·ªìng b·ªô code nh√°nh main"
            git fetch --all
            git checkout main
            git reset --hard origin/main
            git clean -fd

            echo "üìù Ghi file .env.production t·ª´ secret"
            echo "${{ secrets.FRONTEND_ENV_PRODUCTION }}" > .env.production

            echo "üèóÔ∏è Building Docker image (without affecting running container)..."
            if ! docker compose -f docker-compose.yml build; then
              echo "‚ùå Build failed. Container still running. Abort."
              exit 1
            fi

            echo "üßº Build succeeded. Stopping old container..."
            docker stop frontend || true
            docker rm frontend || true

            echo "üöÄ Starting new container..."
            docker compose -f docker-compose.yml up -d

            echo "‚è≥ Waiting for container to initialize..."
            sleep 20

            echo "ü©∫ Performing health check..."
            ID=$(docker compose ps -q frontend)
            if [ -z "$ID" ]; then
              echo "‚ùå Kh√¥ng t√¨m th·∫•y container ID"
              exit 1
            fi
            echo "ü©∫ Ch·ªù container healthy (t·ªëi ƒëa 120s)..."
            deadline=$((SECONDS+120))
            while [ "$SECONDS" -lt "$deadline" ]; do
              status=$(docker inspect -f '{{.State.Health.Status}}' "$ID" 2>/dev/null || echo starting)
              if [ "$status" = "healthy" ]; then
                echo "‚úÖ Deployment th√†nh c√¥ng: $status"
                docker image prune -f --filter "until=168h" || true
                exit 0
              elif [ "$status" = "unhealthy" ]; then
                echo "‚ùå Healthcheck fail: $status"
                docker compose -f "$COMPOSE_FILE" logs --since=10m "$SERVICE" | tail -n 200 || true
                exit 1
              fi
              sleep 3
            done

            echo "‚ùå Timeout ch·ªù healthy"
            docker compose -f "$COMPOSE_FILE" logs --since=10m "$SERVICE" | tail -n 200 || true
            exit 1
