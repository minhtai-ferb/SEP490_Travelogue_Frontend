name: Deploy Frontend to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          script: |
            set -e
            APP_DIR="${{ secrets.VPS_APP_DIR }}" 

            echo "üìÇ V√†o th∆∞ m·ª•c d·ª± √°n"
            if [ ! -d "$APP_DIR/.git" ]; then
              mkdir -p "$APP_DIR"
              git clone ${{ secrets.REPO_SSH_URL }} "$APP_DIR"
            fi
            cd "$APP_DIR"

            echo "üîÑ ƒê·ªìng b·ªô code nh√°nh main"
            git fetch --all
            git checkout main
            git reset --hard origin/main
            git clean -fd

            echo "üìù Ghi file .env.production t·ª´ secret"
            echo "${{ secrets.FRONTEND_ENV_PRODUCTION }}" > .env.production

            echo "üèóÔ∏è Build image Node 22"
            docker compose build --pull

            echo "üöÄ Kh·ªüi ƒë·ªông container"
            docker compose up -d --remove-orphans

            echo "‚è≥ Ch·ªù container 'frontend' healthy (t·ªëi ƒëa ~2 ph√∫t)"
            ID=$(docker compose ps -q frontend)
            timeout 120 sh -c '
              while true; do
                status=$(docker inspect -f "{{.State.Health.Status}}" '"$ID"' 2>/dev/null || echo "starting")
                [ "$status" = "healthy" ] && break
                [ "$status" = "unhealthy" ] && exit 1
                sleep 5
              done
            ' && echo "‚úÖ Deploy OK" || (echo "‚ùå Health check failed" && docker compose ps && docker compose logs --since=5m frontend | tail -n 300 && exit 1)

